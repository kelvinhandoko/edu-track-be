generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Course      Course[]
}

model Lecturer {
  id        String   @id @default(cuid())
  name      String
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  Course    Course[]

  @@unique([name, userId])
}

model Profile {
  id         String    @id @default(cuid())
  dob        DateTime?
  fullname   String?
  pictureUrl String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  userId     String    @unique
}

model Course {
  id            String          @id @default(cuid())
  name          String
  price         Int
  backgroundUrl String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  category      Category        @relation(fields: [categoryId], references: [id])
  categoryId    String
  lecturer      Lecturer        @relation(fields: [lecturerId], references: [id])
  lecturerId    String
  CourseSection CourseSection[]

  @@unique([lecturerId, name])
  @@fulltext([name])
}

model CourseSection {
  id          String   @id @default(cuid())
  title       String
  description String?
  videoUrl    String
  position    Int
  isPublished Boolean
  isFree      Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId    String
  Comment     Comment[] 
}

model CourseStatus {
  id          String   @id @default(cuid())
  completion  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  type        String
  userId      String
  courseId    String

  @@index([userId])
  @@index([courseId])

  User   User   @relation(fields: [userId], references: [id])
  Course Course @relation(fields: [courseId], references: [id])
}

model User {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Comment   Comment[]
  Profile   Profile?
  CourseStatus CourseStatus[] 
  @@index([id])
}

model Comment {
  id              String   @id @default(cuid())
  commentBody     String
  isLecturer      Boolean
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  courseSectionId String
  userId          String

  @@index([courseSectionId])
  @@index([userId])

  CourseSection CourseSection @relation(fields: [courseSectionId], references: [id])
  User          User          @relation(fields: [userId], references: [id])
}
